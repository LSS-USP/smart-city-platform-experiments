#!/bin/sh

FILE_DIR=`perl -e 'use Cwd "abs_path";print abs_path(shift)' $0`
BASE_DIR=`dirname $FILE_DIR`/..
CLUSTER=cluster-xp
ZONE=us-central1-f
MACHINE_TYPE=n1-standard-1
NUM_NODES=8

verify () {
  if [ $? != 0 ]; then
    echo "$1"
    exit 2
  fi
}

create_cluster () {
  echo "Creating the cluster"

  gcloud container clusters create $CLUSTER --zone $ZONE --machine-type $MACHINE_TYPE --num-nodes $NUM_NODES --preemptible
  #gcloud deployment-manager deployments create cluster --config cluster/cluster.yaml 
  gcloud container clusters get-credentials $CLUSTER 
}

create_pods () {
  echo "Creating postgres service"
  kubectl create -f kubernetes/postgres.yaml
  
  echo "Preparing database"
  kubectl create -f kubernetes/kong_migration_postgres.yaml

  echo "Running job for database migration"
  running=`kubectl get pods | grep kong-migration | wc -l`
  while [ $running -eq 1 ]
  do
    sleep 3s
    running=`kubectl get pods | grep kong-migration | wc -l`
    echo -n '.'
  done

  echo
  echo "Deleting job of database migration"
  kubectl delete -f kubernetes/kong_migration_postgres.yaml
  
  echo "Deploying Kong"
  kubectl create -f kubernetes/kong_postgres.yaml
  
  echo "Deploying RabbitMQ"
  kubectl create secret generic rabbitmq-config --from-literal=erlang-cookie=c-is-for-cookie-thats-good-enough-for-me
  kubectl create -f kubernetes/rabbitmq.yaml

  echo "Deploying MongoDB"
  kubectl apply -f kubernetes/googlecloud_ssd.yaml
  kubectl apply -f kubernetes/mongo-statefulset.yaml

  echo "Deploying etcd"
  kubectl create -f kubernetes/etcd.yaml
  sleep 3s

  echo "Deploying Postgres with Stolon"
  kubectl create -f kubernetes/postgres-stolon-interscity.yaml
  sleep 10s
  pod_name=`kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | grep stolon-sentinel | head -1`
  echo "Stolon sentinel POD name: $pod_name"
  printf "yes\n" | kubectl exec $pod_name stolonctl -it -- --cluster-name=cluster-xp --store-backend=etcd --store-endpoints=http://etcd-client:2379 init
  while [ $? != 0 ]
  do
    sleep 3
    printf "yes\n" | kubectl exec $pod_name stolonctl -it -- --cluster-name=cluster-xp --store-backend=etcd --store-endpoints=http://etcd-client:2379 init
  done

  create_interscity_services

  echo "======== Current Status ==========="
  kubectl get svc,pods
}

create_interscity_services() {
  echo "Preparing Resource Catalog database"
  kubectl create -f kubernetes/resource-cataloguer-migration.yaml

  echo "Running job for database migration"
  running=`kubectl get pods | grep resource-cataloguer-migration | wc -l`
  while [ $running -eq 1 ]
  do
    sleep 3s
    running=`kubectl get pods | grep resource-cataloguer-migration | wc -l`
    echo -n '.'
  done

  echo
  echo "Deleting job of resource-cataloguer database migration"
  kubectl delete -f kubernetes/resource-cataloguer-migration.yaml

  echo "Deploying Resource Cataloguer"
  kubectl create -f kubernetes/resource-cataloguer.yaml

  #=====================================================================

  echo "Preparing Resource Adaptor database"
  kubectl create -f kubernetes/resource-adaptor-migration.yaml

  echo "Running job for database migration"
  running=`kubectl get pods | grep resource-adaptor-migration | wc -l`
  while [ $running -eq 1 ]
  do
    sleep 3s
    running=`kubectl get pods | grep resource-adaptor-migration | wc -l`
    echo -n '.'
  done

  echo
  echo "Deleting job of resource-adaptor database migration"
  kubectl delete -f kubernetes/resource-adaptor-migration.yaml

  echo "Deploying Resource Cataloguer"
  kubectl create -f kubernetes/resource-adaptor.yaml

  #=====================================================================

  echo "Deploying Data Collector"
  kubectl create -f kubernetes/data-collector.yaml

  #=====================================================================

  echo "Deploying Resource Discoverer"
  kubectl create -f kubernetes/resource-discoverer.yaml
}

delete_cluster() {
  echo "Deleting the cluster"
  yes | gcloud container clusters delete $CLUSTER --zone $ZONE
  echo "Cluster deleted!"
  echo "Deleting disks"
  names=`gcloud compute disks list | sed -n '1!p' | while read -r instance; do printf $instance | awk '{print $1}'; done`
  for name in $names; do
    echo "Disk: $name"
    yes | gcloud compute disks delete $name
  done
}

delete_pods() {
  echo "Deleting postgres service"
  kubectl delete -f kubernetes/postgres.yaml

  echo "Deleting Kong"
  kubectl delete -f kubernetes/kong_migration_postgres.yaml
  kubectl delete -f kubernetes/kong_postgres.yaml

  echo "Deleting RabbitMQ"
  kubectl delete -f kubernetes/rabbitmq.yaml

  echo "Deleting MongoDB"
  kubectl delete statefulset mongo
  kubectl delete svc mongo
  kubectl delete pvc -l role=mongo

  echo "Deploying etcd"
  kubectl delete -f kubernetes/etcd.yaml

  echo "Deleting Postgres"
  kubectl delete -f kubernetes/postgres-stolon-interscity.yaml

  echo "Deleting Resource Cataloguer"
  kubectl delete -f kubernetes/resource-cataloguer-migration.yaml
  kubectl delete -f kubernetes/resource-cataloguer.yaml

  echo "Deleting Resource Adaptor"
  kubectl delete -f kubernetes/resource-adaptor-migration.yaml
  kubectl delete -f kubernetes/resource-adaptor.yaml

  echo "Deleting Data Collector"
  kubectl delete -f kubernetes/data-collector.yaml

  echo "Deleting Resource Discoverer"
  kubectl delete -f kubernetes/resource-discoverer.yaml
}

scale_mongo() {
  kubectl scale --replicas=$1 statefulset mongo
}

scale_postgres() {
  kubectl scale --replicas=3 rc stolon-sentinel
  kubectl scale --replicas=3 rc stolon-proxy
}

if [ "$1" = "create-all" ]; then
  create_cluster
  create_pods
fi

if [ "$1" = "create-pods" ]; then
  create_pods
fi

if [ "$1" = "delete-all" ]; then
 delete_pods
 delete_cluster
fi

if [ "$1" = "delete-pods" ]; then
  delete_pods
fi
